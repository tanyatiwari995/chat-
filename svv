// // //user.model.js
// // import { Schema, model } from "mongoose";

// // const userSchema = new Schema({
// //     username: {
// //         type: String,
// //         required: true,
// //         unique: true,
// //     },
// //     name: {
// //         type: String,
// //         required: true,
// //     },
// //     password: {
// //         type: String,
// //         required: true,
// //     },
// //     profilePicture: {
// //         type: String,
// //         default: "",
// //     },
// //     gender: {
// //         type: String,
// //         enum: ["Male", "Female","Other"],
// //     },
    
// // },
// //     { timestamps: true }
// // );

// // const User = model("User", userSchema);
// // export default User;


// // //user.js
// // // src/models/User.js

// // import mongoose, { Schema, model } from "mongoose";

// // const userSchema = new Schema({
// //   username: {
// //     type: String,
// //     required: true,
// //     unique: true,
// //     trim: true,
// //   },
// //   name: {
// //     type: String,
// //     required: false,
// //   },
// //   password: {
// //     type: String,
// //     required: false,
// //   },
// //   gender: {
// //     type: String,
// //     enum: ["Male", "Female", "Other"],
// //   },
// //   profilePicture: {
// //     type: String,
// //     default: "",
// //   },
// //   socketId: {
// //     type: String,
// //     default: null,
// //   },
// // }, {
// //   timestamps: true,
// // });

// // const User = mongoose.models.User || model("User", userSchema);
// // export default User;































// const express = require('express');
// const mongoose = require('mongoose');
// const cors = require('cors');
// const bodyParser = require('body-parser');
// const crypto = require('crypto');

// const app = express();
// app.use(cors());
// app.use(express.json());
// app.use(bodyParser.urlencoded({extended: true}));

// mongoose.connect('mongodb+srv://akhandelwal1228:W5yEH3oBJGfSPTTL@cluster0.x12q5.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0',
//     {
//         useNewUrlParser: true,
//         useUnifiedTopology: true
//     }
// ).then(() => console.log('MongoDB connected'))
// .catch(err => console.error(err));

// const userSchema = new mongoose.Schema({
//     name: {type: String, required: true},
//     email: {type: String, required: true, unique: true},
//     password: {type: String, required: true},
//     upi_id: {type: String, unique: true},
//     balance: {type: Number}
// });

// const User = mongoose.model('User', userSchema);

// const transactionSchema = new mongoose.Schema({
//     sender_upi_id: {type: String, required: true},
//     reciever_upi_id: {type: String, required: true},
//     amount: {type: Number, required: true},
//     timeStamp: {type: Date, default: Date.now}
// });

// const Transaction = mongoose.model('Transaction', transactionSchema);

// const generateUPI = () => {
//     const randomId = crypto.randomBytes(4).toString('hex');
//     return `${randomId}@fastpay`;
// };

// app.post('/api/signup', async (req, res) => {
//     try{
//         const { name, email, password} = req.body;

//         let user = await User.findOne({email});
//         if(user){
//             return res.status(400).send({message: 'User already exists'});
//         }

//         const upi_id = generateUPI();
//         const balance = 1000;

//         user = new User({name, email, password, upi_id, balance});
//         await user.save();
//         res.status(201).send({message: 'User registered successfully', upi_id});
//     } catch(error){
//         console.log(error);
//         res.status(500).send({message: 'Server error'});
//     }
// });

// app.get('/api/user/:upi_id', async(req,res) => {
//     try{
//         const { upi_id} = req.params;
//         const user = await User.findOne({upi_id});

//         if(!user){
//             return res.status(404).send({message: 'User not found'});
//         }

//         res.status(200).send(user);
//     }catch(error){
//         console.error('Error fetching user:', error);
//     }
// });

// app.post('/api/login', async(req,res) => {
//     try{
//         const {email, password} = req.body;

//         const user = await User.findOne({email});
//         if(!user || user.password !== password) {
//             return res.status(400).send({message:"Invalid credentials"});
//         }

//         res.status(200).send({
//             message: "Login successful",
//             upi_id: user.upi_id,
//             balance: user.balance,
//         });
//     }catch(error){
//         console.error(error);
//         res.status(500).send({message: "Server Error"});
//     }
// });

// app.post('/api/transaction', async(req,res) => {
//     try{
//         const {sender_upi_id, reciever_upi_id, amount} = req.body;

//         if(amount <= 0){
//             return res.status(400).send({message: "Invalid amount"});
//         }

//         const sender = await User.findOne({upi_id: sender_upi_id});
//         const reciever = await User.findOne({upi_id: reciever_upi_id});

//         if(!sender){
//             return res.status(404).send({message: "Sender not found"});
//         }
//         if(!reciever){
//             return res.status(404).send({message: "Reciever not found"});
//         }

//         sender.balance -= amount;
//         reciever.balance += amount;

//         console.log("Updating sender balance:", sender);
//         console.log("Updating reciever balance:", reciever);

//         await sender.save();
//         await reciever.save();

//         console.log("Sender balance after save:", sender);
//         console.log("Reciever balance after save:", reciever);

//         const transaction = new Transaction({
//             sender_upi_id,
//             reciever_upi_id,
//             amount,
//         });
//         await transaction.save();

//         res.status(200).send({message: "Transaction successful"});
//     }catch(error){
//      console.error("Transaction error:", error);
//      res.status(500).send({message: "Server error"});
//     }
// });

// app.get("/api/transaction/:upi_id", async(req,res) => {
//     try{
//         const {upi_id} = req.params;

//         const transactions = await Transaction.find({
//             $or: [{ sender_upi_id: upi_id}, {reciever_upi_id: upi_id}],
//         }).sort({timeStamp: -1});
        
//         res.status(200).send(transactions);
//     }catch(error){
//         console.error(error);
//         res.status(500).send({message: "Server error"});
//     }
// });

// const PORT = process.env.PORT || 4003;
// app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

// {
//   "name": "backend",
//   "version": "1.0.0",
//   "description": "",
//   "main": "index.js",
//   "scripts": {
//     "test": "echo \"Error: no test specified\" && exit 1",
//     "start": "nodemon server.js"
//   },
//   "author": "",
//   "license": "ISC",
//   "dependencies": {
//     "body-parser": "^1.20.3",
//     "cors": "^2.8.5",
//     "crypto": "^1.0.1",
//     "dotenv": "^16.4.7",
//     "express": "^4.21.2",
//     "mongodb": "^6.12.0",
//     "mongoose": "^8.9.2",
//     "nodemon": "^3.1.9"
//   }
// }

// // importing modules
// const express = require("express");
// const bodyParser = require("body-parser");
// const cors = require("cors");
// const axios = require("axios");
// const sha256 = require("sha256");
// const uniqid = require("uniqid");

// // creating express application
// const app = express();

// // UAT environment
// const MERCHANT_ID = "PGTESTPAYUAT";
// const PHONE_PE_HOST_URL = "https://api-preprod.phonepe.com/apis/pg-sandbox";
// const SALT_INDEX = 1;
// const SALT_KEY = "099eb0cd-02cf-4e2a-8aca-3e6c6aff0399";
// const APP_BE_URL = "http://localhost:3002"; // our application

// // setting up middleware
// app.use(cors());
// app.use(bodyParser.json());
// app.use(
//   bodyParser.urlencoded({
//     extended: false,
//   })
// );

// // Defining a test route
// app.get("/", (req, res) => {
//   res.send("PhonePe Integration APIs!");
// });

// // endpoint to initiate a payment
// app.get("/pay", async function (req, res, next) {
//   // Initiate a payment

//   // Transaction amount
//   const amount = +req.query.amount;

//   // User ID is the ID of the user present in our application DB
//   let userId = "MUID123";

//   // Generate a unique merchant transaction ID for each transaction
//   let merchantTransactionId = uniqid();

//   // redirect url => phonePe will redirect the user to this url once payment is completed. It will be a GET request, since redirectMode is "REDIRECT"
//   let normalPayLoad = {
//     merchantId: MERCHANT_ID, //* PHONEPE_MERCHANT_ID . Unique for each account (private)
//     merchantTransactionId: merchantTransactionId,
//     merchantUserId: userId,
//     amount: amount * 100, // converting to paise
//     redirectUrl: `${APP_BE_URL}/payment/validate/${merchantTransactionId}`,
//     redirectMode: "REDIRECT",
//     mobileNumber: "9999999999",
//     paymentInstrument: {
//       type: "PAY_PAGE",
//     },
//   };

//   // make base64 encoded payload
//   let bufferObj = Buffer.from(JSON.stringify(normalPayLoad), "utf8");
//   let base64EncodedPayload = bufferObj.toString("base64");

//   // X-VERIFY => SHA256(base64EncodedPayload + "/pg/v1/pay" + SALT_KEY) + ### + SALT_INDEX
//   let string = base64EncodedPayload + "/pg/v1/pay" + SALT_KEY;
//   let sha256_val = sha256(string);
//   let xVerifyChecksum = sha256_val + "###" + SALT_INDEX;

//   axios
//     .post(
//       `${PHONE_PE_HOST_URL}/pg/v1/pay`,
//       {
//         request: base64EncodedPayload,
//       },
//       {
//         headers: {
//           "Content-Type": "application/json",
//           "X-VERIFY": xVerifyChecksum,
//           accept: "application/json",
//         },
//       }
//     )
//     .then(function (response) {
//       console.log("response->", JSON.stringify(response.data));
//       res.redirect(response.data.data.instrumentResponse.redirectInfo.url);
//     })
//     .catch(function (error) {
//       res.send(error);
//     });
// });

// // endpoint to check the status of payment
// app.get("/payment/validate/:merchantTransactionId", async function (req, res) {
//   const { merchantTransactionId } = req.params;
//   // check the status of the payment using merchantTransactionId
//   if (merchantTransactionId) {
//     let statusUrl =
//       `${PHONE_PE_HOST_URL}/pg/v1/status/${MERCHANT_ID}/` +
//       merchantTransactionId;

//     // generate X-VERIFY
//     let string =
//       `/pg/v1/status/${MERCHANT_ID}/` + merchantTransactionId + SALT_KEY;
//     let sha256_val = sha256(string);
//     let xVerifyChecksum = sha256_val + "###" + SALT_INDEX;

//     axios
//       .get(statusUrl, {
//         headers: {
//           "Content-Type": "application/json",
//           "X-VERIFY": xVerifyChecksum,
//           "X-MERCHANT-ID": merchantTransactionId,
//           accept: "application/json",
//         },
//       })
//       .then(function (response) {
//         console.log("response->", response.data);
//         if (response.data && response.data.code === "PAYMENT_SUCCESS") {
//           // redirect to FE payment success status page
//           res.send(response.data);
//         } else {
//           // redirect to FE payment failure / pending status page
//         }
//       })
//       .catch(function (error) {
//         // redirect to FE payment failure / pending status page
//         res.send(error);
//       });
//   } else {
//     res.send("Sorry!! Error");
//   }
// });

// // Starting the server
// const port = 3002;
// app.listen(port, () => {
//   console.log(`PhonePe application listening on port ${port}`);
// });


// {
//   "name": "phonepe-poc",
//   "version": "1.0.0",
//   "description": "",
//   "main": "index.js",
//   "scripts": {
//     "test": "echo \"Error: no test specified\" && exit 1",
//     "start": "node index.js"
//   },
//   "author": "",
//   "license": "ISC",
//   "dependencies": {
//     "axios": "^1.6.0",
//     "body-parser": "^1.20.2",
//     "cors": "^2.8.5",
//     "express": "^4.18.2",
//     "sha256": "^0.2.0",
//     "uniqid": "^5.4.0"
//   }
// }